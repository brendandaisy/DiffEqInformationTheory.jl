
```julia
using MarginalDivergence
using Distributions, MonteCarloMeasurements
using Parameters
```

### Define the latent process

There are two classes of interfaces: models inheriting from `GenericModel` must simply define a `solve` method, while
models inheriting from `ODEModel` and `DDEModel`equires implementing at least `timespan` `initial_values` `parameters` and `de_func`, 
which point to the relavent componenets of DifferentialEquations.jl's implementation. 
The `solve` method as well as some other helpers are then inherited.

Here we implement a simple `ODEModel`, the SIS model. First, we define the differential equations:

```julia
function sis!(dx, x, p, t)
    I = x[1]
    β, α = p
    dx[1] = β * I * (1-I) - α * I
end
```

These should be implemented in the same way as in `DifferentialEquations.jl`. Now we implement our model object,
which stores the parameters, timespan, etc, as well as complete the `ODEModel` interface.

```julia
@with_kw struct SISModel{T<:Real} <: ODEModel{T}
    start::T = 0.
    stop::T = 20.
    I₀::Param{T} = 0.01
    β::Param{T} = 0.3
    α::Param{T} = 0.1
end

MarginalDivergence.timespan(m::SISModel) = (m.start, m.stop)
MarginalDivergence.initial_values(m::SISModel) = [m.I₀]
MarginalDivergence.parameters(m::SISModel) = [m.β, m.α]
MarginalDivergence.de_func(::SISModel) = sis!
```
And we're all set. Define an instance of the model with uncertain $\beta$ and $\alpha$, seeing data only up to $T=10$.

```julia
mod = SISModel(β=0..1, α=0.1..0.5)
sol = solve(mod; saveat=0:10, save_idxs=1).u
```

To compute the RMD of $\beta$, we also simulate the model holding $\beta$ fixed to the "true" value.

```julia
θtrue = (β=0.7, α=0.2)
sol_restr = solve(mod, (β=0.7,); saveat=0:10, save_idxs=1).u
```

Finally, we need to define the observation process, here using the provided Gaussian noise model, and get the Distribution
of the data.

```julia
obs_mod = NConstVar(0.01)

sol_true = solve(mod, θtrue; saveat=0:10, save_idxs=1).u
ytrue = observe_dist(obs_mod, sol_true)
```

And we get the RMD, approximating with 100 outer product steps (in practice, $N$ and $M$ should probably be much larger)
```julia
marginal_divergence(ytrue, sol_restr, sol, obs_mod; N=100)
```